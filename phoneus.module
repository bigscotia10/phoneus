<?php

// Add item to array if formatters that have been defined
// Define how aour formatter will be associated
// Theme the field
// Regsiter the field funciton

// Supplies information about the formatter.
function phoneus_field_formatter_info(){
  // returns an array, the collection of any formatter we are returning
  // We can add more here later if needed.
  return array(
    // we gave ut this name and it has an array of data associated with it.
    phoneus_custom_field => array(
      // This displays when we select this in our form ui.
      'label' => t(''),
      // We only need this to work with rext fields for now.
      'field types' => array('text'),
    )
  );
}

// Assign  a callback for out formatter when it runs
function phoneus_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // if its this type, above we say textfield type
  switch ($display['type']){
    // and out field name defined above
    case 'phoneus_custom_field':
      $element[0]['#type'] = 'markup';
      // since its only one item, we can pass it the 0, for the first item
      $element[0]['#markup'] = theme('phoneus_custom_field', array('value' => $items[0]['safe_value']));
      break;
  }
  return $element;
}